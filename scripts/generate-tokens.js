#!/usr/bin/env node
/**
 * 生成小程序使用的设计令牌产物：
 *  1. miniprogram/styles/generated/tokens.wxss  (提供 theme-root + page 自定义属性)
 *  2. miniprogram/styles/generated/tokens.js    (供 JS 层引用)
 */

const fs = require('fs');
const path = require('path');

const ROOT = path.resolve(__dirname, '..');
const CONFIG_PATH = path.join(ROOT, 'design-tokens.json');
const OUTPUT_DIR = path.join(ROOT, 'miniprogram', 'styles', 'generated');
const WXSS_TARGET = path.join(OUTPUT_DIR, 'tokens.wxss');
const JS_TARGET = path.join(OUTPUT_DIR, 'tokens.js');

const ALIAS_RULES = [
  {
    match: (pathArr) => pathArr[0] === 'colors',
    build: (name) => [`colors-${name}`, `color-${name}`]
  },
  {
    match: (pathArr) => pathArr[0] === 'typography' && pathArr[1] === 'fontSizes',
    build: (name) => [`typography-fontSizes-${name}`, `text-${name}`]
  },
  {
    match: (pathArr) => pathArr[0] === 'typography' && pathArr[1] === 'fontWeights',
    build: (name) => [`typography-fontWeights-${name}`, `font-${name}`]
  },
  {
    match: (pathArr) => pathArr[0] === 'spacing',
    build: (name) => [`spacing-${name}`, `space-${name}`]
  },
  {
    match: (pathArr) => pathArr[0] === 'radius',
    build: (name) => [`radius-${name}`]
  },
  {
    match: (pathArr) => pathArr[0] === 'shadow',
    build: (name) => [`shadow-${name}`]
  },
  {
    match: (pathArr) => pathArr[0] === 'overlay',
    build: (name) => [`overlay-${name}`]
  },
  {
    match: (pathArr) => pathArr[0] === 'background',
    build: (name) => [`background-${name}`, `bg-${name}`]
  },
  {
    match: (pathArr) => pathArr[0] === 'gradient',
    build: (name) => [`gradient-${name}`]
  },
  {
    match: (pathArr) => pathArr[0] === 'breakpoints',
    build: (name) => [`breakpoints-${name}`, `breakpoint-${name}`]
  },
  {
    match: (pathArr) => pathArr[0] === 'transition',
    build: (name) => [`transition-${name}`]
  }
];

function ensureConfig() {
  if (!fs.existsSync(CONFIG_PATH)) {
    throw new Error(`设计令牌配置不存在: ${CONFIG_PATH}`);
  }
  const raw = fs.readFileSync(CONFIG_PATH, 'utf8');
  try {
    return JSON.parse(raw);
  } catch (error) {
    throw new Error(`解析 design-tokens.json 失败: ${error.message}`);
  }
}

function writeFile(target, content) {
  fs.mkdirSync(path.dirname(target), { recursive: true });
  fs.writeFileSync(target, content, 'utf8');
  console.log(`生成文件 -> ${path.relative(ROOT, target)}`);
}

function toKebabCase(value) {
  return String(value).replace(/([A-Z])/g, '-$1').replace(/_{1,}/g, '-').toLowerCase();
}

function resolveAliases(pathArr, key) {
  const kebab = toKebabCase(key);
  for (const rule of ALIAS_RULES) {
    if (rule.match(pathArr)) {
      return rule.build(kebab);
    }
  }
  return [pathArr.map(toKebabCase).join('-') + '-' + kebab];
}

function buildCssVariables(tokens) {
  const lines = [];
  lines.push('/* Auto-generated by scripts/generate-tokens.js */');
  lines.push('.theme-root,');
  lines.push('page {');

  const walk = (node, pathArr) => {
    Object.entries(node).forEach(([key, value]) => {
      const nextPath = [...pathArr, key];
      if (value && typeof value === 'object' && !Array.isArray(value)) {
        walk(value, nextPath);
      } else {
        const aliases = resolveAliases(pathArr, key);
        aliases.forEach((alias) => {
          lines.push(`  --${alias}: ${value};`);
        });
      }
    });
  };

  walk(tokens, []);

  lines.push('}');
  lines.push('');
  lines.push('/* 基础快捷类 */');
  lines.push('.text-primary { color: var(--color-primary); }');
  lines.push('.text-secondary { color: var(--color-text-secondary); }');
  lines.push('.bg-surface { background-color: var(--color-bg-primary); }');
  lines.push('.bg-muted { background-color: var(--color-bg-tertiary); }');
  lines.push('.shadow-base { box-shadow: var(--shadow-base); }');
  lines.push('.shadow-md { box-shadow: var(--shadow-md); }');
  lines.push('.rounded-lg { border-radius: var(--radius-lg); }');

  return lines.join('\n');
}

function buildJsModule(tokens) {
  const header = '// Auto-generated by scripts/generate-tokens.js\n';
  const body = `module.exports = ${JSON.stringify(tokens, null, 2)};\n`;
  return header + body;
}

function main() {
  const tokens = ensureConfig();
  const wxss = buildCssVariables(tokens);
  const js = buildJsModule(tokens);

  writeFile(WXSS_TARGET, wxss);
  writeFile(JS_TARGET, js);

  console.log('设计令牌生成完成 ✅');
}

if (require.main === module) {
  try {
    main();
  } catch (error) {
    console.error(error.message);
    process.exit(1);
  }
}
